<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="25" passed="24">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="19839" started-at="2023-05-01T20:28:30 EET" finished-at="2023-05-01T20:28:49 EET">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="19839" started-at="2023-05-01T20:28:30 EET" finished-at="2023-05-01T20:28:49 EET">
      <class name="ZippoTest">
        <test-method status="PASS" signature="Setup()[pri:0, instance:ZippoTest@2bbf4b8b]" name="Setup" is-config="true" duration-ms="3" started-at="2023-05-01T20:28:35 EET" finished-at="2023-05-01T20:28:35 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method status="PASS" signature="bodyArrayHasSizeTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="bodyArrayHasSizeTest" duration-ms="363" started-at="2023-05-01T20:28:35 EET" finished-at="2023-05-01T20:28:36 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bodyArrayHasSizeTest -->
        <test-method status="PASS" signature="checkCountryInResponseBody()[pri:0, instance:ZippoTest@2bbf4b8b]" name="checkCountryInResponseBody" duration-ms="788" started-at="2023-05-01T20:28:36 EET" finished-at="2023-05-01T20:28:36 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkCountryInResponseBody -->
        <test-method status="PASS" signature="checkHasItemy()[pri:0, instance:ZippoTest@2bbf4b8b]" name="checkHasItemy" duration-ms="282" started-at="2023-05-01T20:28:36 EET" finished-at="2023-05-01T20:28:37 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkHasItemy -->
        <test-method status="PASS" signature="checkstateInResponseBody()[pri:0, instance:ZippoTest@2bbf4b8b]" name="checkstateInResponseBody" duration-ms="292" started-at="2023-05-01T20:28:37 EET" finished-at="2023-05-01T20:28:37 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkstateInResponseBody -->
        <test-method status="PASS" signature="combiningTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="combiningTest" duration-ms="293" started-at="2023-05-01T20:28:37 EET" finished-at="2023-05-01T20:28:37 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- combiningTest -->
        <test-method status="PASS" signature="contentTypeTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="contentTypeTest" duration-ms="283" started-at="2023-05-01T20:28:37 EET" finished-at="2023-05-01T20:28:38 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- contentTypeTest -->
        <test-method status="PASS" signature="extractJsonAll_POJO()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractJsonAll_POJO" duration-ms="356" started-at="2023-05-01T20:28:38 EET" finished-at="2023-05-01T20:28:38 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractJsonAll_POJO -->
        <test-method status="PASS" signature="extractPOJO_Soru()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractPOJO_Soru" duration-ms="261" started-at="2023-05-01T20:28:38 EET" finished-at="2023-05-01T20:28:38 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractPOJO_Soru -->
        <test-method status="PASS" signature="extractingJsonPath()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPath" duration-ms="775" started-at="2023-05-01T20:28:38 EET" finished-at="2023-05-01T20:28:39 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPath -->
        <test-method status="PASS" signature="extractingJsonPath2()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPath2" duration-ms="404" started-at="2023-05-01T20:28:39 EET" finished-at="2023-05-01T20:28:39 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPath2 -->
        <test-method status="PASS" signature="extractingJsonPath3()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPath3" duration-ms="962" started-at="2023-05-01T20:28:39 EET" finished-at="2023-05-01T20:28:40 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPath3 -->
        <test-method status="PASS" signature="extractingJsonPath4()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPath4" duration-ms="942" started-at="2023-05-01T20:28:40 EET" finished-at="2023-05-01T20:28:41 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPath4 -->
        <test-method status="PASS" signature="extractingJsonPath5()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPath5" duration-ms="893" started-at="2023-05-01T20:28:41 EET" finished-at="2023-05-01T20:28:42 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPath5 -->
        <test-method status="FAIL" signature="extractingJsonPathResponsAll()[pri:0, instance:ZippoTest@2bbf4b8b]" name="extractingJsonPathResponsAll" duration-ms="1084" started-at="2023-05-01T20:28:42 EET" finished-at="2023-05-01T20:28:43 EET">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ZippoTest.extractingJsonPathResponsAll(ZippoTest.java:361)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extractingJsonPathResponsAll -->
        <test-method status="PASS" signature="pathParamTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="pathParamTest" duration-ms="475" started-at="2023-05-01T20:28:43 EET" finished-at="2023-05-01T20:28:44 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pathParamTest -->
        <test-method status="PASS" signature="queryParamTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="queryParamTest" duration-ms="1072" started-at="2023-05-01T20:28:44 EET" finished-at="2023-05-01T20:28:45 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryParamTest -->
        <test-method status="PASS" signature="queryParamTest2()[pri:0, instance:ZippoTest@2bbf4b8b]" name="queryParamTest2" duration-ms="4029" started-at="2023-05-01T20:28:45 EET" finished-at="2023-05-01T20:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queryParamTest2 -->
        <test-method status="PASS" signature="requestResponseSpecificationn()[pri:0, instance:ZippoTest@2bbf4b8b]" name="requestResponseSpecificationn" duration-ms="385" started-at="2023-05-01T20:28:49 EET" finished-at="2023-05-01T20:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- requestResponseSpecificationn -->
        <test-method status="PASS" signature="statusCodeTest()[pri:0, instance:ZippoTest@2bbf4b8b]" name="statusCodeTest" duration-ms="247" started-at="2023-05-01T20:28:49 EET" finished-at="2023-05-01T20:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- statusCodeTest -->
        <test-method status="PASS" signature="test()[pri:0, instance:ZippoTest@2bbf4b8b]" name="test" duration-ms="1" started-at="2023-05-01T20:28:49 EET" finished-at="2023-05-01T20:28:49 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- ZippoTest -->
      <class name="Campus.CountryTest">
        <test-method status="PASS" signature="Setup()[pri:0, instance:Campus.CountryTest@458c1321]" name="Setup" is-config="true" duration-ms="2339" started-at="2023-05-01T20:28:30 EET" finished-at="2023-05-01T20:28:32 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method status="PASS" signature="createCountry()[pri:0, instance:Campus.CountryTest@458c1321]" name="createCountry" duration-ms="1364" started-at="2023-05-01T20:28:32 EET" finished-at="2023-05-01T20:28:33 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCountry -->
        <test-method status="PASS" signature="createCountryNegative()[pri:0, instance:Campus.CountryTest@458c1321]" name="createCountryNegative" duration-ms="473" started-at="2023-05-01T20:28:33 EET" depends-on-methods="Campus.CountryTest.createCountry" finished-at="2023-05-01T20:28:34 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCountryNegative -->
        <test-method status="PASS" signature="updateCountry()[pri:0, instance:Campus.CountryTest@458c1321]" name="updateCountry" duration-ms="562" started-at="2023-05-01T20:28:34 EET" depends-on-methods="Campus.CountryTest.createCountryNegative" finished-at="2023-05-01T20:28:34 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCountry -->
        <test-method status="PASS" signature="deleteCountry()[pri:0, instance:Campus.CountryTest@458c1321]" name="deleteCountry" duration-ms="551" started-at="2023-05-01T20:28:34 EET" depends-on-methods="Campus.CountryTest.updateCountry" finished-at="2023-05-01T20:28:35 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCountry -->
        <test-method status="PASS" signature="deleteCountryNegative()[pri:0, instance:Campus.CountryTest@458c1321]" name="deleteCountryNegative" duration-ms="321" started-at="2023-05-01T20:28:35 EET" depends-on-methods="Campus.CountryTest.deleteCountry" finished-at="2023-05-01T20:28:35 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteCountryNegative -->
      </class> <!-- Campus.CountryTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
